//--------------------------------------------------------------------------------------

Buffer <float4> mTransf  <int vType = 0; int vID = 5;>;
Buffer <uint>   VideoBuf <int vType = 0; int vID = 10;>;			  

cbuffer cbChangesEveryFrame
{
    matrix ev_World <
	                int vType = 1;
	                >;
					
	matrix ev_VP   <
	               int vType = 6;
	               >;
};

BlendState NoBlending
{
  BlendEnable[0] = FALSE;
  RenderTargetWriteMask[0] = 0x0F;
};

DepthStencilState DisableDepth
{
  DepthEnable = false;
};

DepthStencilState EnableDepth
{
  DepthEnable = true;
};

struct VS_INPUT
{
    float3 Pos   : POSITION;
	float2 Tex   : TEXCOORD;	
};

struct PS_INPUT
{
    float4 Pos   : SV_POSITION;
	float2 Tex   : TEXCOORD0;
};

float4 getVideoPixel(float2 tex_coord)
{
  uint curr_width = 960 * tex_coord.y;
  uint curr_height = 544 * tex_coord.x;
  float4 OutColor;
  uint offset = curr_height*960*3 + curr_width*3;
  OutColor.r = VideoBuf.Load(offset)/255.0f;
  OutColor.g = VideoBuf.Load(offset + 1)/255.0f;
  OutColor.b = VideoBuf.Load(offset + 2)/255.0f;
  OutColor.a = 1.0f;
  return OutColor;
}

matrix get_inst_transform(uint inst_id)
{
  float4 row1 = mTransf.Load(inst_id*4);
  float4 row2 = mTransf.Load(inst_id*4 + 1);
  float4 row3 = mTransf.Load(inst_id*4 + 2);
  float4 row4 = mTransf.Load(inst_id*4 + 3);
        
  return float4x4( row1, row2, row3, row4 );
}

//--------------------------------------------------------------------------------------

PS_INPUT VS( VS_INPUT input )
{
    PS_INPUT output = (PS_INPUT)0; 
	output.Pos = mul( float4(input.Pos,1), mul(ev_World, get_inst_transform(0)) );
    output.Pos = mul( output.Pos, ev_VP );
	output.Tex = input.Tex;
	
    return output;
}

//--------------------------------------------------------------------------------------

float4 PS( PS_INPUT input) : SV_Target
{	
  return getVideoPixel(input.Tex)
}

//--------------------------------------------------------------------------------------

technique10 Render <int tType = 0;>
{
    pass P0
    {
        SetVertexShader( CompileShader( vs_4_0, VS() ) );
        SetGeometryShader( NULL );
        SetPixelShader( CompileShader( ps_4_0, PS() ) );
		SetBlendState( NoBlending, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
    }
}

//--------------------------------------------------------------------------------------
